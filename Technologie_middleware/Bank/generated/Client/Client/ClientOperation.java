// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `client.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Client;

public interface ClientOperation extends com.zeroc.Ice.Object
{
    AccountData addClient(String name, int PESEL, int monthlyInflows, com.zeroc.Ice.Current current);

    float checkCredit(int PESEL, int GUID, int value, int time, com.zeroc.Ice.Current current);

    int getCredit(int PESEL, int GUID, int value, int time, com.zeroc.Ice.Current current);

    float getBalance(int PESEL, int GUID, com.zeroc.Ice.Current current);

    accountType login(int PESEL, int GUID, com.zeroc.Ice.Current current);

    static final String[] _iceIds =
    {
        "::Client::ClientOperation",
        "::Ice::Object"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Client::ClientOperation";
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_addClient(ClientOperation obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_name;
        int iceP_PESEL;
        int iceP_monthlyInflows;
        iceP_name = istr.readString();
        iceP_PESEL = istr.readInt();
        iceP_monthlyInflows = istr.readInt();
        inS.endReadParams();
        AccountData ret = obj.addClient(iceP_name, iceP_PESEL, iceP_monthlyInflows, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        AccountData.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_checkCredit(ClientOperation obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_PESEL;
        int iceP_GUID;
        int iceP_value;
        int iceP_time;
        iceP_PESEL = istr.readInt();
        iceP_GUID = istr.readInt();
        iceP_value = istr.readInt();
        iceP_time = istr.readInt();
        inS.endReadParams();
        float ret = obj.checkCredit(iceP_PESEL, iceP_GUID, iceP_value, iceP_time, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeFloat(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getCredit(ClientOperation obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_PESEL;
        int iceP_GUID;
        int iceP_value;
        int iceP_time;
        iceP_PESEL = istr.readInt();
        iceP_GUID = istr.readInt();
        iceP_value = istr.readInt();
        iceP_time = istr.readInt();
        inS.endReadParams();
        int ret = obj.getCredit(iceP_PESEL, iceP_GUID, iceP_value, iceP_time, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getBalance(ClientOperation obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_PESEL;
        int iceP_GUID;
        iceP_PESEL = istr.readInt();
        iceP_GUID = istr.readInt();
        inS.endReadParams();
        float ret = obj.getBalance(iceP_PESEL, iceP_GUID, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeFloat(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_login(ClientOperation obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_PESEL;
        int iceP_GUID;
        iceP_PESEL = istr.readInt();
        iceP_GUID = istr.readInt();
        inS.endReadParams();
        accountType ret = obj.login(iceP_PESEL, iceP_GUID, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        accountType.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    final static String[] _iceOps =
    {
        "addClient",
        "checkCredit",
        "getBalance",
        "getCredit",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "login"
    };

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_addClient(this, in, current);
            }
            case 1:
            {
                return _iceD_checkCredit(this, in, current);
            }
            case 2:
            {
                return _iceD_getBalance(this, in, current);
            }
            case 3:
            {
                return _iceD_getCredit(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 5:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 6:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 7:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 8:
            {
                return _iceD_login(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
