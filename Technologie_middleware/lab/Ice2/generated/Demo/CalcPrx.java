// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `calculator.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Demo;

public interface CalcPrx extends Ice.ObjectPrx
{
    public long add(int a, int b);

    public long add(int a, int b, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_add(int a, int b);

    public Ice.AsyncResult begin_add(int a, int b, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_add(int a, int b, Ice.Callback __cb);

    public Ice.AsyncResult begin_add(int a, int b, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_add(int a, int b, Callback_Calc_add __cb);

    public Ice.AsyncResult begin_add(int a, int b, java.util.Map<String, String> __ctx, Callback_Calc_add __cb);

    public Ice.AsyncResult begin_add(int a, 
                                     int b, 
                                     IceInternal.Functional_LongCallback __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_add(int a, 
                                     int b, 
                                     IceInternal.Functional_LongCallback __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                     IceInternal.Functional_BoolCallback __sentCb);

    public Ice.AsyncResult begin_add(int a, 
                                     int b, 
                                     java.util.Map<String, String> __ctx, 
                                     IceInternal.Functional_LongCallback __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_add(int a, 
                                     int b, 
                                     java.util.Map<String, String> __ctx, 
                                     IceInternal.Functional_LongCallback __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                     IceInternal.Functional_BoolCallback __sentCb);

    public long end_add(Ice.AsyncResult __result);

    public long subtract(int a, int b);

    public long subtract(int a, int b, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_subtract(int a, int b);

    public Ice.AsyncResult begin_subtract(int a, int b, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_subtract(int a, int b, Ice.Callback __cb);

    public Ice.AsyncResult begin_subtract(int a, int b, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_subtract(int a, int b, Callback_Calc_subtract __cb);

    public Ice.AsyncResult begin_subtract(int a, int b, java.util.Map<String, String> __ctx, Callback_Calc_subtract __cb);

    public Ice.AsyncResult begin_subtract(int a, 
                                          int b, 
                                          IceInternal.Functional_LongCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_subtract(int a, 
                                          int b, 
                                          IceInternal.Functional_LongCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb);

    public Ice.AsyncResult begin_subtract(int a, 
                                          int b, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_LongCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_subtract(int a, 
                                          int b, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_LongCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb);

    public long end_subtract(Ice.AsyncResult __result);

    public long multiply(int a, int b);

    public long multiply(int a, int b, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_multiply(int a, int b);

    public Ice.AsyncResult begin_multiply(int a, int b, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_multiply(int a, int b, Ice.Callback __cb);

    public Ice.AsyncResult begin_multiply(int a, int b, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_multiply(int a, int b, Callback_Calc_multiply __cb);

    public Ice.AsyncResult begin_multiply(int a, int b, java.util.Map<String, String> __ctx, Callback_Calc_multiply __cb);

    public Ice.AsyncResult begin_multiply(int a, 
                                          int b, 
                                          IceInternal.Functional_LongCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_multiply(int a, 
                                          int b, 
                                          IceInternal.Functional_LongCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb);

    public Ice.AsyncResult begin_multiply(int a, 
                                          int b, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_LongCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_multiply(int a, 
                                          int b, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_LongCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb);

    public long end_multiply(Ice.AsyncResult __result);
}
